version: '3.9'

services:
  nextfrontend:
    container_name: frontend
    build:
      context: ./NextFrontend/my-app/
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    networks:
      - client

  accountdb:
    container_name: accountdb
    image: postgres
    restart: always  
    volumes:
      - ./pData:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: example
    ports:
      - 5432:5432
    healthcheck:      
      test: ["CMD-SHELL", "pg_isready -U postgres -d users -t 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s
    networks:
      - db-network
      
  accountservice:
    container_name: accountservice
    build:
      context: ./Services/AccountService/
      dockerfile: Dockerfile
    ports:
      - 5000:5000
    depends_on:
      accountdb:
        condition: service_healthy
    links:
      - accountdb
    networks:
      - client
      - db-network

  chatservice:
    container_name: chatservice
    build:
      context: ./Services/ChatService/
      dockerfile: Dockerfile
    ports:
      - 5001:5001
    networks:
      - client

  roomservice:
    container_name: roomservice
    build:
      context: ./Services/RoomService/
      dockerfile: Dockerfile
    ports:
      - 5002:5002
    networks:
      - client
  
  videoservice:
    container_name: videoservice
    build:
      context: ./Services/VideoService/
      dockerfile: Dockerfile
    ports:
      - 5003:5003
    networks:
    - client

  adminer:
    image: adminer
    restart: always
    ports:
    - 8080:8080

  kong:
     container_name: kong_gateway
     image: kong:latest
     volumes:
      - ./kong.yml:/usr/local/kong/declarative/kong.yml
     environment:
       - KONG_DATABASE=off
       - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
       - KONG_PROXY_ACCESS_LOG=/dev/stdout
       - KONG_ADMIN_ACCESS_LOG=/dev/stdout
       - KONG_PROXY_ERROR_LOG=/dev/stderr
       - KONG_ADMIN_ERROR_LOG=/dev/stderr
       - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
     ports:
       - "8000:8000"
       - "8443:8443"
       - "8001:8001"
       - "8444:8444"
     networks:
     - client

networks:
  client:
    driver: bridge
  db-network:

    
  
  


      
